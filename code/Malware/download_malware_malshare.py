import argparse
import json
import logging
import os
import sys
from multiprocessing.pool import Pool

import requests
import tqdm
from dotenv import load_dotenv

load_dotenv('variables.env')

API_KEY = os.getenv('MALSHARE_API')

logging.basicConfig(format='%(asctime)s %(levelname)s:%message)s', level=logging.WARNING)


def get_all_hashes(limit=22000):
    try:
        malshare_url = "http://malshare.com/api.php"
        payload = {'action': 'getlist', 'api_key': API_KEY}
        r = requests.get(malshare_url, params=payload)
        all_hashes = r.json()
        return [file['sha256'] for file in all_hashes if 'sha256' in file][:limit]
    except Exception as e:
        logging.error("get_all_hashes: Problem connecting. Please Try again.")
        logging.exception(e)
        return []


def download_file_by_hash(file_hash):
    logging.debug("Downloading {}".format(file_hash))
    try:
        malshare_url = "http://malshare.com/sampleshare.php"
        payload = {'action': 'getfile', 'api_key': API_KEY, 'hash': file_hash}
        user_agent = {'User-agent': 'wget_malshare daily 1.0'}

        r = requests.get(malshare_url, params=payload, headers=user_agent)
        sample = r.content

        if sample == b"Sample not found":
            logging.error("Sample not Found")
            return None
        if sample == b"ERROR! => Account not activated":
            logging.error("Bad API Key")
            return None

        os.makedirs("malware_dataset_malshare2", exist_ok=True)

        with open(os.path.join("malware_dataset_malshare2", file_hash), mode="wb") as fh:
            fh.write(sample)
            logging.info("{} saved to files".format(file_hash))

    except Exception as e:
        logging.error("download_file_by_hash: Problem connecting. Please Try again.")
        logging.exception(e)
        sys.exit(1)


def download_list():
    files = get_all_hashes()
    logging.debug(f"Total hashes to download: {len(files)}")
    pool = Pool(os.cpu_count())
    for _ in tqdm.tqdm(pool.imap_unordered(download_file_by_hash, files), total=len(files)):
        pass


if __name__ == "__main__":
    download_list()