import requests
import os
from dotenv import load_dotenv
from time import sleep
from requests.exceptions import ChunkedEncodingError, RequestException

load_dotenv('variables.env')

API_KEY = os.getenv('BAZAAR_API_KEY')
BASE_URL = os.getenv('BASE_URL')

def get_malware_list(page=1):
    headers = {
        'Authorization': f'Bearer {API_KEY}'
    }
    data = {
        'query': 'get_file_type',
        'file_type': 'exe',
        'selector': 'windows_executable',
        'page': page
    }
    retries = 3
    while retries > 0:
        try:
            response = requests.post(BASE_URL, headers=headers, data=data, timeout=60)
            response.raise_for_status()
            return response.json()
        except (ChunkedEncodingError, RequestException) as e:
            print(f"Request failed: {e}. Retrying...")
            retries -= 1
            sleep(5)
    print("Failed to retrieve data after several attempts.")
    return []

def download_file(file_hash, save_path):
    data = {
        'query': 'get_file',
        'sha256_hash': file_hash
    }
    retries = 6
    while retries > 0:
        try:
            response = requests.post(BASE_URL, data=data, timeout=10)
            response.raise_for_status()
            if response.content:
                with open(save_path, 'wb') as file:
                    file.write(response.content)
                print(f"Downloaded: {save_path}")
            else:
                print(f"Failed to download {file_hash}, no content.")
            break
        except (ChunkedEncodingError, RequestException) as e:
            print(f"Download failed: {e}. Retrying...")
            retries -= 1
            sleep(5)

def already_downloaded(file_hash):
    return os.path.exists(os.path.join('malwares_dataset', f"{file_hash}.bin"))

def main():
    os.makedirs('malwares_dataset', exist_ok=True)
    count = 0
    page = 1
    total_files_to_download = 10000
    
    while count < total_files_to_download:
        malware_list = get_malware_list(page)
        if malware_list and 'data' in malware_list:
            if len(malware_list['data']) == 0:
                print("No more data available.")
                break
            
            for malware in malware_list['data']:
                if count >= total_files_to_download:
                    break
                
                if 'sha256_hash' in malware:
                    file_hash = malware['sha256_hash']
                    if already_downloaded(file_hash):
                        print(f"File {file_hash} already downloaded.")
                        continue
                    save_path = os.path.join('malwares_dataset', f"{file_hash}.bin")
                    download_file(file_hash, save_path)
                    count += 1
                else:
                    print(f"Key 'sha256_hash' not found in malware data: {malware}")
            
            page += 1  
            sleep(1)  
        else:
            print("No data found or error occurred.")
            break

    print(f"Downloaded {count} files.")

if __name__ == "__main__":
    main()